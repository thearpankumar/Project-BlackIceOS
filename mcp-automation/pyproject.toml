[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mcp-webautomation"
version = "0.1.0"
description = "MCP System Automation Tool for AI-driven desktop control"
authors = [{name = "MCP WebAutomation", email = "info@example.com"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.10"
keywords = ["mcp", "automation", "desktop", "ai", "computer-vision"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Monitoring",
    "Operating System :: OS Independent",
]
dependencies = [
    "aiofiles>=24.1.0",
    "aiohttp>=3.10.0",
    "fastmcp>=2.12.2",
    "loguru>=0.7.3",
    "mss>=10.1.0",
    "numpy>=2.2.6",
    "opencv-python>=4.11.0.86",
    "pillow>=11.3.0",
    "pydantic>=2.11.7",
    "python-dotenv>=1.0.0",
    "pynput>=1.8.1",
    "rich>=14.1.0",
    "typer>=0.17.4",
]

[project.urls]
Homepage = "https://github.com/example/mcp-webautomation"
Documentation = "https://github.com/example/mcp-webautomation/docs"
Repository = "https://github.com/example/mcp-webautomation"
"Bug Tracker" = "https://github.com/example/mcp-webautomation/issues"

[project.scripts]
mcp-webautomation = "mcp_automation.cli:main"

[project.optional-dependencies]
dev = [
    "black>=25.1.0",
    "flake8>=7.3.0",
    "isort>=6.0.1",
    "mypy>=1.17.1",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=7.0.0",
]
gpu = [
    "torch>=2.8.0",
    "torchvision>=0.23.0",
]
paddleocr = [
    "paddleocr>=3.2.0",
    "paddlepaddle-gpu>=2.6.2",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"mcp_automation" = ["py.typed"]

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mcp_automation"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=mcp_automation",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
